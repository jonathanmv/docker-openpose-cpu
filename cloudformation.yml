# Taken from https://gist.github.com/davidfrey/f0e71cfd17883a5ab89fdcaa8615fb2c
# Another reference

AWSTemplateFormatVersion: "2010-09-09"
Description: Openpose video processor
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Variables
        Parameters:
          - Environment
      - Label:
          default: Constants
        Parameters:
          - AppName
          - OriginalSuffix
          - ConversionSuffix
          - ProcessingSuffix
          - ProcessedSuffix
          - NotificationEmail

Parameters:
  AppName:
    Type: String
    Default: openpose-video-processor
    AllowedValues:
      - openpose-video-processor
  OriginalSuffix:
    Type: String
    Default: original
    Description: Suffix for raw resources
  ConversionSuffix:
    Type: String
    Default: conversion
    Description: Suffix for resources involved in converting raw resources
  ProcessingSuffix:
    Type: String
    Default: processing
    Description: Suffix for resources involved in processing converted resources
  ProcessedSuffix:
    Type: String
    Default: proccessed
    Description: Suffix for resources that have been processed successfully
  Environment:
    Type: String
    AllowedValues:
      - dev
      - test
      - prod
    Default: dev
  NotificationEmail:
    Type: String
    Description: Once a video has been processed, a notification will be sent to this email address

Resources:
  OriginalSourceQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
      - OriginalSourceQueue
      - OriginalSourceDeadLetterQueue
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - sqs:SendMessage
            Resource: !GetAtt OriginalSourceQueue.Arn
            Condition:
              ArnLike:
                # Static BucketName used to avoid circular dependency with S3 bucket
                aws:SourceArn:
                  !Join [
                    "",
                    [
                      "arn:aws:s3:*:*:",
                      !Join [
                        "-",
                        [
                        !Ref AppName,
                        !Ref Environment,
                        !Ref OriginalSuffix,
                        "*",
                        ],
                      ],
                    ],
                  ]
      Queues:
        - !Ref OriginalSourceQueue
        - !Ref OriginalSourceDeadLetterQueue

  OriginalSourceQueue:
    Type: AWS::SQS::Queue
    DependsOn:
      - OriginalSourceDeadLetterQueue
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 864000
      QueueName:
        !Join [
          "-",
          [!Ref AppName, !Ref Environment, !Ref OriginalSuffix, "queue"],
        ]
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt OriginalSourceDeadLetterQueue.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 18000 # 5 hours

  OriginalSourceDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600 # 14 days. Maximum allowed period
      QueueName:
        !Join [
          "-",
          [
          !Ref AppName,
          !Ref Environment,
          !Ref OriginalSuffix,
          "deadletter-queue",
          ],
        ]
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 500

  ProcessedSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        !Join [
          "-",
          [!Ref AppName, !Ref Environment, !Ref ProcessedSuffix, "sns-topic"],
        ]
      Subscription:
        - Endpoint: !Ref NotificationEmail
          Protocol: email

  ProcessedSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    DependsOn:
      - ProcessedSnsTopic
    Properties:
      Topics:
        - Ref: ProcessedSnsTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "s3.amazonaws.com"
            Action:
              - sns:Publish
            Resource:
              !Join [
                "",
                [
                  "arn:aws:sns:*:*:",
                  !Join [
                    "-",
                    [!Ref AppName, !Ref Environment, !Ref ProcessedSuffix, "*"],
                  ],
                ],
              ]
            Condition:
              ArnLike:
                aws:SourceArn:
                  !Join [
                    "",
                    [
                      "arn:aws:s3:*:*:",
                      !Join [
                        "-",
                        [
                        !Ref AppName,
                        !Ref Environment,
                        !Ref OriginalSuffix,
                        "*",
                        ],
                      ],
                    ],
                  ]

  OriginalSourceBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - OriginalSourceQueue
      - OriginalSourceDeadLetterQueue
      - OriginalSourceQueuePolicy
    Properties:
      BucketName:
        !Join [
          "-",
          [!Ref AppName, !Ref Environment, !Ref OriginalSuffix, "bucket"],
        ]
      NotificationConfiguration:
        QueueConfigurations:
          - Event: "s3:ObjectCreated:*"
            Queue: !GetAtt OriginalSourceQueue.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref OriginalSuffix
          - Event: "s3:ObjectCreated:*"
            Queue: !GetAtt OriginalSourceQueue.Arn
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value: !Ref ConversionSuffix
          - Event: "s3:ObjectCreated:*"
            Queue: !GetAtt OriginalSourceQueue.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref ProcessingSuffix
        TopicConfigurations:
          - Event: "s3:ObjectCreated:*"
            Topic: # arn:aws:sns:eu-west-2:472551880915:openpose-video-processor-dev-proccessed-sns-topic
              !Join [
                "",
                [
                !Join [
                  ":",
                  ["arn:aws:sns", !Ref "AWS::Region", !Ref "AWS::AccountId"],
                ],
                ":",
                !Join [
                  "-",
                  [
                  !Ref AppName,
                  !Ref Environment,
                  !Ref ProcessedSuffix,
                  "sns-topic",
                  ],
                ],
                ],
              ]
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref ProcessedSuffix

  # ECR Repositories - One per docker image
  OpenposeECSRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName:
        !Join ["-", [!Ref AppName, !Ref Environment, "openpose-ecr-repository"]]
  FfmpegECSRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName:
        !Join ["-", [!Ref AppName, !Ref Environment, "ffmpeg-ecr-repository"]]

  OriginalECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        !Join [
          "-",
          [!Ref AppName, !Ref Environment, !Ref OriginalSuffix, "ecs-cluster"],
        ]

  # ECS Tasks - One for conversion and one for processing
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Join ["-", [!Ref AppName, !Ref Environment, "ecs-task-execution-role"]]
      Description: Allows ECS to get images from ECR
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ["ecs-tasks.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecs:RunTask"
                Resource: "*"
  S3ReadWriteAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Join [
          "-",
          [!Ref AppName, !Ref Environment, "s3-read-write-access-role"],
        ]
      Description: Grants read and write access to the S3 bucket in the stack
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ["ecs-tasks.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: S3ReadWriteAccessRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*Object"
                Resource: "*"

  ECSTasksCloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join ["-", [!Ref AppName, !Ref Environment, "ecs-tasks-log-group"]]
      RetentionInDays: 7

  ConvertToAviECSTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: container
          EntryPoint:
            - "./download-convert-upload.sh"
          Image: # 472551880915.dkr.ecr.eu-west-2.amazonaws.com/openpose-video-processor-dev-ffmpeg-ecr-repository:latest
            !Join [
              "",
              [
              !Ref "AWS::AccountId",
              ".dkr.ecr.",
              !Ref "AWS::Region",
              ".amazonaws.com/",
              !Ref FfmpegECSRepository,
              ":latest",
              ],
            ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSTasksCloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ConversionSuffix
          WorkingDirectory: "/scripts"
      Cpu: 256
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Family:
        !Join [
          "-",
          [
          !Ref AppName,
          !Ref Environment,
          !Ref ConversionSuffix,
          "mp4-to-avi-ecs-task",
          ],
        ]
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt S3ReadWriteAccessRole.Arn
  ProcessWithOpenPoseECSTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: container
          EntryPoint:
            - "./download-process-upload.sh"
          Image: # 472551880915.dkr.ecr.eu-west-2.amazonaws.com/openpose-video-processor-dev-openpose-ecr-repository:latest
            !Join [
              "",
              [
              !Ref "AWS::AccountId",
              ".dkr.ecr.",
              !Ref "AWS::Region",
              ".amazonaws.com/",
              !Ref OpenposeECSRepository,
              ":latest",
              ],
            ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSTasksCloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ProcessingSuffix
          WorkingDirectory: "/scripts"
      Cpu: 1024
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Family:
        !Join [
          "-",
          [!Ref AppName, !Ref Environment, !Ref ProcessingSuffix, "ecs-task"],
        ]
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt S3ReadWriteAccessRole.Arn

  # Lambda
  HandleS3CreateObjectLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Join ["-", [!Ref AppName, !Ref Environment, "lambda-execution-role"]]
      Description: Allows Lambda to run ecs tasks and report to dead letter
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: HandleS3CreateObjectLambdaExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:ChangeMessageVisibility"
                  - "sqs:GetQueueAttributes"
                  - "ecs:RunTask"
                  - "iam:PassRole"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  HandleS3CreateObjectLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - HandleS3CreateObjectLambda
      - OriginalSourceQueue
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt OriginalSourceQueue.Arn
      FunctionName: !GetAtt HandleS3CreateObjectLambda.Arn

  HandleS3CreateObjectLambdaDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600 # 14 days. Maximum allowed period
      QueueName:
        !Join [
          "-",
          [
          !Ref AppName,
          !Ref Environment,
          "handle-s3-create-object-lambda-deadletter-queue",
          ],
        ]
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 500

  HandleS3CreateObjectLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - HandleS3CreateObjectLambdaDeadLetterQueue
      - HandleS3CreateObjectLambdaExecutionRole
    Properties:
      Code:
        ZipFile: |
          exports.handler = function() {}
      DeadLetterConfig:
        TargetArn: !GetAtt HandleS3CreateObjectLambdaDeadLetterQueue.Arn
      Description: Handles events when new objects are created in the bucket
      FunctionName:
        !Join [
          "-",
          [
          !Ref AppName,
          !Ref Environment,
          "handle-s3-create-object-lambda",
          ],
        ]
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt HandleS3CreateObjectLambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 5
      Environment:
        Variables:
          ECS_CLUSTER: !GetAtt OriginalECSCluster.Arn
          ECS_TASK_CONVERT: !Ref ConvertToAviECSTask
          ECS_TASK_PROCESS: !Ref ProcessWithOpenPoseECSTask
